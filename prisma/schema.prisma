generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Destination {
  id           String     @id @default(cuid())
  name         String
  country      String
  region       String?
  imageUrl     String?
  imageAltText String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  latitude     Float?
  longitude    Float?
  properties   Property[]

  @@index([name])
}

model Property {
  id                    String                @id @default(cuid())
  name                  String
  originalName          String?
  status                PropertyStatus        @default(ONBOARDING)
  destinationId         String
  numberOfRooms         Int                   @default(0)
  numberOfBathrooms     Int                   @default(0)
  maxGuests             Int                   @default(0)
  propertySize          Float?
  address               String?
  postcode              String?
  city                  String?
  latitude              Float?
  longitude             Float?
  additionalDetails     String?
  licenseType           LicenseType           @default(NOT_APPLICABLE)
  conciergeServiceOffer ConciergeServiceOffer @default(ESSENTIAL)
  categories            String[]
  operatedByExternal    String?
  exclusivity           Boolean               @default(false)
  position              Int?
  segment               String?
  iconicCollection      Boolean               @default(false)
  onboardingFees        Boolean               @default(false)
  onlineReservation     Boolean               @default(true)
  flexibleCancellation  Boolean               @default(false)
  neighborhood          String?
  setting               String?
  specialAttention      String?
  locatedInCity         Boolean               @default(false)
  beachAccess           Boolean               @default(false)
  beachAccessibility    String?
  beachTravelTime       String?
  privateBeachAccess    Boolean               @default(false)
  skiSlopes             Boolean               @default(false)
  shops                 Boolean               @default(false)
  restaurants           Boolean               @default(false)
  touristCenter         Boolean               @default(false)
  golfCourse            Boolean               @default(false)
  accessibility         Json?
  accessibilityOptions  AccessibilityType[]
  policies              Json?
  arrivalDeparture      Json?
  staff                 Json?
  heatingAC             Json?
  eventsAllowed         Boolean               @default(false)
  eventsCapacity        Int?
  eventsDetails         Json?
  services              Json?
  description           Json?
  parking               Json?
  goodToKnow            String?
  internalComment       String?
  warning               String?
  automaticOffer        Json?
  surroundings          Json?
  checkInTime           String?
  checkOutTime          String?
  checkInPerson         String?
  wifiName              String?
  wifiPassword          String?
  wifiInAllRooms        Boolean               @default(false)
  wifiSpeed             String?
  mobileNetworkCoverage String?
  hasFireExtinguisher   Boolean               @default(false)
  hasFireAlarm          Boolean               @default(false)
  electricMeterAccessible Boolean             @default(false)
  electricMeterLocation String?
  stayMetadata          Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  bookings              Booking[]
  marketingContent      MarketingContent[]
  photos                Photo[]
  prices                PriceRange[]
  destination           Destination           @relation(fields: [destinationId], references: [id])
  contacts              PropertyContact[]
  contactProperties     ContactProperty[]
  resources             Resource[]
  rooms                 Room[]
  activityProviders     ActivityProvider[]
  equipmentRequests     EquipmentRequest[]
  legalDocuments        LegalDocument[]
  pricing               PropertyPricing?
  minimumStayRules      MinimumStayRule[]
  operationalCosts      OperationalCost[]
  availabilityRequests  AvailabilityRequest[]

  @@index([status])
  @@index([destinationId])
  @@index([name])
  @@index([maxGuests])
  @@index([numberOfRooms, numberOfBathrooms])
  @@index([status, destinationId])
  @@index([eventsAllowed])
}

model Room {
  id          String   @id @default(cuid())
  propertyId  String
  name        String
  type        RoomType
  groupName   String?
  position    Int      @default(0)
  generalInfo Json?
  view        String?
  equipment   Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  equipmentRequests EquipmentRequest[]

  @@index([propertyId])
  @@index([position])
}

model PropertyContact {
  id         String      @id @default(cuid())
  propertyId String
  type       ContactType
  name       String
  email      String?
  phone      String?
  notes      String?
  metadata   Json?
  isApproved Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  property   Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([type])
  @@index([propertyId, type])
  @@index([isApproved])
}

model Booking {
  id             String         @id @default(cuid())
  propertyId     String
  type           BookingType
  status         BookingStatus  @default(CONFIRMED)
  source         BookingSource  @default(MANUAL)
  startDate      DateTime
  endDate        DateTime
  guestName      String?
  guestEmail     String?
  guestPhone     String?
  numberOfGuests Int?
  totalAmount    Float?
  notes          String?
  externalId     String?
  metadata       Json?
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  property       Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([startDate, endDate])
  @@index([type])
  @@index([status])
}

model AvailabilityRequest {
  id             String                      @id @default(cuid())
  propertyId     String
  startDate      DateTime
  endDate        DateTime
  guestName      String
  guestEmail     String
  guestPhone     String
  numberOfGuests Int
  message        String?
  status         AvailabilityRequestStatus   @default(PENDING)
  urgency        AvailabilityRequestUrgency  @default(MEDIUM)
  requestedBy    String                      // User ID who created the request
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime                    @updatedAt
  property       Property                    @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([status])
  @@index([createdAt])
  @@index([startDate, endDate])
}

model PriceRange {
  id                String   @id @default(cuid())
  propertyId        String
  name              String
  startDate         DateTime
  endDate           DateTime
  
  // Legacy fields (to be removed after migration)
  nightlyRate       Float?
  weeklyRate        Float?
  monthlyRate       Float?
  
  // Owner pricing (what owner wants)
  ownerNightlyRate  Float?
  ownerWeeklyRate   Float?
  
  // Commission settings
  commissionRate    Float    @default(25.0) // percentage
  
  // Public pricing (calculated)
  publicNightlyRate Float?
  publicWeeklyRate  Float?
  
  // Display settings
  isValidated       Boolean  @default(true) // checkbox state
  
  minimumStay       Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  property          Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([startDate, endDate])
  @@index([propertyId, nightlyRate])
}

model PropertyPricing {
  id                      String    @id @default(cuid())
  propertyId              String    @unique
  
  // General settings
  currency                String    @default("EUR")
  displayOnWebsite        Boolean   @default(true)
  retroCommission         Boolean   @default(false)
  lastPricingUpdate       DateTime?
  
  // Financial details
  securityDeposit         Float?
  paymentSchedule         String?   // e.g., "50 - 40 - 10"
  minOwnerAcceptedPrice   Float?
  minLCAcceptedPrice      Float?
  publicMinimumPrice      Float?
  
  // Commission rates
  netOwnerCommission      Float?    @default(25.0)
  publicPriceCommission   Float?    @default(20.0)
  b2b2cPartnerCommission  Float?    @default(10.0)
  
  // Fees
  publicTaxes             Float?    @default(0.0)
  clientFees              Float?    @default(2.0)
  
  property                Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model MinimumStayRule {
  id               String            @id @default(cuid())
  propertyId       String
  bookingCondition BookingCondition  @default(PER_NIGHT)
  minimumNights    Int               @default(1)
  startDate        DateTime?
  endDate          DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  property         Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@index([propertyId])
  @@index([startDate, endDate])
}

model OperationalCost {
  id               String           @id @default(cuid())
  propertyId       String
  costType         OperationalCostType
  priceType        PriceType        @default(PER_STAY)
  estimatedPrice   Float?
  publicPrice      Float?
  paidBy           String?          // e.g., "Le Collectionist"
  comment          String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  property         Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@index([propertyId])
}

model Resource {
  id         String   @id @default(cuid())
  propertyId String
  type       String
  name       String
  url        String
  uploadedBy String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([type])
}

model Photo {
  id         String   @id @default(cuid())
  propertyId String
  url        String
  caption    String?
  position   Int      @default(0)
  roomId     String?
  isMain     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   String   @default("OTHER")
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([position])
  @@index([propertyId, isMain])
  @@index([propertyId, position])
}

model MarketingContent {
  id             String   @id @default(cuid())
  propertyId     String
  language       String
  title          String
  description    String
  amenities      String[]
  highlights     String[]
  seoTitle       String?
  seoDescription String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, language])
  @@index([propertyId])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String
  changes    Json?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

model SensitiveDataAccess {
  id         String   @id @default(cuid())
  userId     String
  userRole   String
  action     String
  dataType   String
  propertyId String
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([propertyId])
  @@index([dataType])
  @@index([createdAt])
}

enum PropertyStatus {
  PUBLISHED
  HIDDEN
  ONBOARDING
  OFFBOARDED
}

enum LicenseType {
  NOT_APPLICABLE
  TYPE_1
  TYPE_2
}

enum ConciergeServiceOffer {
  ESSENTIAL
  PREMIUM
  LUXURY
}

enum ContactType {
  OWNER
  MANAGER
  AGENCY
  STAFF
  MAINTENANCE
  EMERGENCY
  CHECK_IN_MANAGER
  SECURITY_DEPOSIT_MANAGER
  SIGNATORY
  HOUSEKEEPING
  GARDENING
  POOL_MAINTENANCE
  CHECK_IN_STAFF
}

enum GlobalContactCategory {
  CLIENT
  OWNER
  PROVIDER
  ORGANIZATION
  OTHER
}

enum ContactPropertyRelationship {
  OWNER
  RENTER
  MANAGER
  STAFF
  EMERGENCY
  MAINTENANCE
  AGENCY
  OTHER
}

enum BookingType {
  CONFIRMED
  TENTATIVE
  BLOCKED
  MAINTENANCE
  OWNER
  OWNER_STAY
  CONTRACT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum BookingSource {
  MANUAL
  EXTERNAL
  IMPORT
  WEBSITE
}

enum AvailabilityRequestStatus {
  PENDING
  CONFIRMED
  REJECTED
}

enum AvailabilityRequestUrgency {
  LOW
  MEDIUM
  HIGH
}

model Contact {
  id           String                    @id @default(cuid())
  firstName    String
  lastName     String
  phone        String?
  email        String?
  language     String                    @default("English")
  category     GlobalContactCategory
  comments     String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  
  // Relationships
  contactProperties ContactProperty[]
  
  @@index([firstName, lastName])
  @@index([email])
  @@index([category])
  @@unique([email])
}

model ContactProperty {
  id           String                      @id @default(cuid())
  contactId    String
  propertyId   String
  relationship ContactPropertyRelationship
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
  
  contact      Contact                     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  property     Property                    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@unique([contactId, propertyId])
  @@index([contactId])
  @@index([propertyId])
}

model ActivityProvider {
  id            String     @id @default(cuid())
  name          String
  type          String     // BAKERY, PHARMACY, RESTAURANTS, SUPERMARKET, MEDICAL, TRANSPORT, ENTERTAINMENT, SPORTS, OTHER
  description   String?
  address       String?
  city          String?
  country       String?
  postalCode    String?
  latitude      Float?
  longitude     Float?
  phone         String?
  email         String?
  website       String?
  openingHours  String?
  priceRange    String?
  amenities     String[]
  tags          String[]
  rating        Float?
  imageUrls     String[]
  comments      String?
  internalNotes String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  properties    Property[]
  
  @@index([name])
  @@index([type])
  @@index([city])
}

model EquipmentRequest {
  id               String                   @id @default(cuid())
  propertyId       String
  roomId           String?
  requestedBy      String
  requestedByEmail String
  status           EquipmentRequestStatus   @default(PENDING)
  priority         EquipmentRequestPriority @default(MEDIUM)
  items            Json                     // Array of requested items with quantities
  reason           String?
  notes            String?
  internalNotes    String?
  approvedBy       String?
  approvedByEmail  String?
  approvedAt       DateTime?
  rejectedReason   String?
  completedAt      DateTime?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  
  property         Property                 @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  room             Room?                    @relation(fields: [roomId], references: [id], onDelete: SetNull)
  
  @@index([propertyId])
  @@index([roomId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
}

enum EquipmentRequestStatus {
  PENDING
  APPROVED
  REJECTED
  ORDERED
  DELIVERED
  CANCELLED
}

enum EquipmentRequestPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model LegalDocument {
  id              String                 @id @default(cuid())
  name            String
  description     String?
  category        LegalDocumentCategory
  subcategory     String?
  status          LegalDocumentStatus    @default(ACTIVE)
  propertyId      String?
  property        Property?              @relation(fields: [propertyId], references: [id])
  expiryDate      DateTime?
  reminderDays    Int?
  url             String                 // Supabase storage URL
  fileSize        Int
  mimeType        String
  uploadedBy      String                 // Clerk user ID
  uploadedAt      DateTime               @default(now())
  lastAccessedAt  DateTime?
  tags            String[]
  metadata        Json?
  versions        LegalDocumentVersion[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  @@index([category])
  @@index([propertyId])
  @@index([status])
  @@index([expiryDate])
}

model LegalDocumentVersion {
  id            String         @id @default(cuid())
  documentId    String
  document      LegalDocument  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  versionNumber Int
  url           String
  fileSize      Int
  uploadedBy    String
  uploadedAt    DateTime       @default(now())
  comment       String?
  
  @@unique([documentId, versionNumber])
  @@index([documentId])
}

enum LegalDocumentCategory {
  PROPERTY_DEED
  LEASE_AGREEMENT
  VENDOR_CONTRACT
  INSURANCE_POLICY
  PERMIT_LICENSE
  TAX_DOCUMENT
  COMPLIANCE_CERTIFICATE
  OTHER
}

enum LegalDocumentStatus {
  ACTIVE
  EXPIRED
  PENDING_RENEWAL
  ARCHIVED
}

enum RoomType {
  BADMINTON_COURT
  BAR
  BASKETBALL_COURT
  BATHROOM
  BEDROOM
  BEDROOM_FOR_CHILDREN
  BEDROOM_FOR_STAFF
  BILLBOARD_ROOM
  CIGAR_CELL
  COLD_CHAMBER
  CONFERENCE_ROOM
  COURTYARD
  COVERED_TERRACE
  DINING_ROOM
  DORMITORY
  DRESSING_ROOM
  FITNESS_ROOM
  FOOTBALL_COURT
  GAMING_ROOM
  GARDEN
  KITCHEN
  LAUNDRY_ROOM
  LIVING_ROOM
  MASSAGE_ROOM
  MEDITATION_ROOM
  MOVIE_ROOM
  MUSIC_ROOM
  OFFICE_ROOM
  PADEL_COURT
  PETANQUE
  POOL_AREA
  POOLHOUSE
  RELAXATION_ROOM
  RESTROOM
  ROOFTOP
  SKIROOM
  SLEEPING_SLUG
  SMOKEHOUSE
  SPA
  SUITE
  TENNIS_COURT
  TERRACE
  TV_ROOM
  VIP
  VERANDA
  VOLLEYBALL_COURT
  WINDOWLESS_BEDROOM
  WINE_CELLAR
}

enum EquipmentType {
  CEILING_FAN
  SOFA
  PUTTING_GREEN
  WINE_CELLAR
  DOUBLE_SUNBED
  SODASTREAM
  DISHWASHER
  GAS_COOKER
  INDUCTION_HOB
  SKI_RACKS
  SLEDGE
  SHARED_TERRACE
  SWING
  TREE_HOUSE
  SEESAW
  CHESS_BOARD
  BOARD_GAMES
  DJ_SET
  POPCORN_MACHINE
  KITCHENETTE
  TREADMILL
  CYCLE
  ROWING_MACHINE
  DUMBBELLS
  WAFFLE_MACHINE
  FOUNTAIN
  POND
  FIRE_PIT
  SINGLE_BASIN_SINK
  DOUBLE_BASIN_SINK
  MASSAGE_TABLE
  OBSERVATORY
  VEGETABLE_GARDEN
  CROQUET
  CRICKET_PITCH
  PARASOL
  VINEYARD
  JACUZZI_BATHTUB
  FIREPLACE
  NORDIC_BATH
  CHAIR
  DVD_PLAYER
  JACK_CABLE
  WINE_GLASS
  GRILL
  TOILET
  RACLETTE_MACHINE
  FONDUE_MACHINE
  SOUND_SYSTEM
  MOORING
  DOUBLE_BED
  BEAN_TO_CUP_COFFEE_MACHINE
  PIER
  COFFEE_POD_MACHINE
  BAR_EQUIPMENT
  BATHTUB
  OUTDOOR_SHOWER
  HAMMOCK
  SOLARIUM
  CHILDREN_POOL
  MAGNIFYING_MIRROR
  TOILET_NOT_IN_BATHROOM
  ACCESSIBLE_TOILETS
  MICROWAVE_OVEN
  PROFESSIONAL_OVEN
  PIZZA_OVEN
  SUNBED
  DELI_SLICER
  DOUBLE_BED_TWIN_BEDS
  HAMMAM_SHOWER
  TELEPHONE
  STORAGE_CUPBOARD
  DVD_LIBRARY
  GAMING_CONSOLE
  DARTS_SET
  STEAMER
  CHILDREN_GAMES
  HEATED_BOOT_WARMER
  REVERSIBLE_AIR_CONDITIONING
  TOASTER
  FILTER_COFFEE_MACHINE
  KETTLE
  JUICER
  BLENDER_MIXER
  DISHWASHER_EQUIPMENT
  TURNTABLE
  FITNESS_EQUIPMENT
  SINGLE_BED
  COMPUTER
  PRINTER
  SCANNER
  SAUNA
  TRAMPOLINE
  SOFA_BED
  AIR_CONDITIONING
  JACUZZI
  BARBECUE
  HAMMAM
  TABLE_FOOTBALL
  TUMBLE_DRYER
  KITCHEN_ISLAND
  WASHING_MACHINE
  RANGE_HOOD
  TERRACE_EQUIPMENT
  PING_PONG_TABLE
  SWIMMING_POOL
  SHOWER
  IRON
  IRONING_BOARD
  DESK
  BILLIARD_TABLE
  FRIDGE
  AMERICAN_FRIDGE
  FREEZER
  ICE_CUBE_MAKER
  ICE_CREAM_SORBET_MACHINE
  OVEN
  WALK_IN_SHOWER
  SANDWICH_MAKER
  THERMOMIX
  BEER_TAP
  DEEP_FRYER
  RICE_COOKER
  GLOVE_DRYERS
  BUNK_BEDS
  COLD_WATER_BATH
  SOFA_EQUIPMENT
  CHILDREN_SLIDE
  CHILDREN_PLAYHOUSE
  COMBINED_GAS_INDUCTION_STOVE
  TENT
  BERBER_TENT
  FAN
  CHAMPAGNE_GLASS
  ARMCHAIR
  SMART_TV
  FLAT_SCREEN_TV
  TV
  SOFA_BED_SINGLE
  VIDEO_PROJECTOR
  PIANO
  SAFE
  WALK_IN_CLOSET
  FOOD_PROCESSOR
  PERGOLA
  HELIPAD
  LIBRARY
}

enum AccessibilityType {
  BY_CAR
  SKI_IN_SKI_OUT
  BY_FOOT
}

enum BookingCondition {
  PER_NIGHT
  WEEKLY_SATURDAY_TO_SATURDAY
  WEEKLY_SUNDAY_TO_SUNDAY
  WEEKLY_MONDAY_TO_MONDAY
}

enum OperationalCostType {
  HOUSEKEEPING
  HOUSEKEEPING_AT_CHECKOUT
  LINEN_CHANGE
  OPERATIONAL_PACKAGE
}

enum PriceType {
  PER_STAY
  PER_WEEK
  PER_DAY
  FIXED
}
